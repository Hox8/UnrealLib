using System;
using System.Diagnostics;

namespace UnrealLib.Experimental.UnObj.DefaultProperties;

public abstract class PropertyHolder
{
    public void SerializeScriptProperties(UnrealPackage Ar)
    {
        if (Ar.IsLoading)
        {
            // Keep pulling in properties until we hit "None"
            while (GetNextProperty(Ar, out var tag))
            {
                Debug.WriteLine($"Read UProperty: {tag.Name}, {tag.Type}, ({tag.Size} bytes)");
                ParseProperty(Ar, tag);
            }
        }
        else
        {
            WriteProperties(Ar);
        }
    }

    /// <remarks>Overrides are generated by the source generator. Do not override manually!</remarks>
    internal virtual void ParseProperty(UnrealPackage Ar, FPropertyTag tag) => tag.SkipUnknownProperty(Ar);

    /// <remarks>Overrides are generated by the source generator. Do not override manually!</remarks>
    internal virtual void WriteProperties(UnrealPackage Ar) => new FPropertyTag() { Name = Ar.GetOrAddName("None") }.Serialize(Ar);

    #region Helpers

    /// <returns>False if this was the last property to be serialized ("None"), otherwise True.</returns>
    public static bool GetNextProperty(UnrealArchive Ar, out FPropertyTag Tag)
    {
        Tag = new();

        // Tag::Serialize() returns False if we've hit final "None" property, otherwise True
        return Tag.Serialize(Ar);
    }

    #endregion
}
